generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              Int        @id @default(autoincrement())
  username        String     @unique
  email           String?    @unique
  password        String?
  phone           String?    @unique
  github_id       String?    @unique
  avatar          String
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  SMSToken        SMSToken[]
  products        Product[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  chatrooms       ChatRoom[]
  messages        Message[]
  purchases       Purchase[]
  givenRatings    Rating[]   @relation("GivenRatings")
  receivedRatings Rating[]   @relation("ReceivedRatings")
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  visible     Boolean    @default(true)
  sold        Boolean    @default(false)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  chatrooms   ChatRoom[]
  purchases   Purchase[]
  ratings     Rating[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  visible    Boolean   @default(true)
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}

model Purchase {
  id        Int     @id @default(autoincrement())
  buyer     User    @relation(fields: [buyerId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  buyerId   Int
  productId Int
}

model Rating {
  raterId   Int
  rateeId   Int
  rating    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  rater     User    @relation("GivenRatings", fields: [raterId], references: [id])
  ratee     User    @relation("ReceivedRatings", fields: [rateeId], references: [id])

  @@id(name: "id", [raterId, rateeId, productId])
}
